// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id           Int      @id @default(autoincrement())
  names        String   @db.VarChar(255)
  last_names   String   @db.VarChar(255)
  email        String   @unique @db.VarChar(255)
  phone_number String   @unique @db.VarChar(8)
  location     String
  password     String   @db.VarChar(100)
  Orders       Orders[]
}

model Businesses {
  id           Int              @id @default(autoincrement())
  name         String           @db.VarChar(255)
  email        String           @unique @db.VarChar(255)
  phone_number String           @unique @db.VarChar(8)
  location     String
  password     String           @db.VarChar(100)
  logo         String           @db.VarChar(255)
  banner       String           @db.VarChar(255)
  slug         String           @db.VarChar(255)
  FoodCategory FoodCategories[]
  Schedules    Schedules[]
}

model Schedules {
  id          Int        @id @default(autoincrement())
  Business    Businesses @relation(fields: [id_business], references: [id], onDelete: Cascade, onUpdate: Cascade)
  id_business Int
  day         String     @db.VarChar(50)
  from        DateTime   @db.Timestamp()
  to          DateTime   @db.Timestamp()
}

model FoodCategories {
  id          Int        @id @default(autoincrement())
  Business    Businesses @relation(fields: [id_business], references: [id], onDelete: Cascade, onUpdate: Cascade)
  id_business Int
  name        String     @db.VarChar(255)
  description String
  Food        Foods[]
}

model Foods {
  id               Int             @id @default(autoincrement())
  FoodCategory     FoodCategories  @relation(fields: [id_food_category], references: [id], onDelete: Cascade, onUpdate: Cascade)
  id_food_category Int
  name             String          @db.VarChar(255)
  description      String
  price            Decimal         @db.Decimal(10, 2)
  extra_fee        Decimal         @db.Decimal(10, 2)
  img_url          String          @db.VarChar(500)
  is_available     Boolean
  OrdersDetails    OrdersDetails[]
}

model Orders {
  id              Int              @id @default(autoincrement())
  User            Users            @relation(fields: [id_user], references: [id], onDelete: Cascade, onUpdate: Cascade)
  id_user         Int
  state           ORDER_STATES
  date            DateTime?        @default(now()) @db.Timestamp()
  token           String?          @unique @default(uuid()) @db.VarChar(100)
  delivery_method DELIVERY_METHODS
  OrdersDetails   OrdersDetails[]
  Cancellation    Cancellation[]
}

model OrdersDetails {
  id       Int     @id @default(autoincrement())
  Order    Orders  @relation(fields: [id_order], references: [id], onDelete: Cascade, onUpdate: Cascade)
  id_order Int
  Food     Foods   @relation(fields: [id_food], references: [id], onDelete: Cascade, onUpdate: Cascade)
  id_food  Int
  price    Decimal @db.Decimal(10, 2)
  quantity Int
}

model Cancellation {
  id      Int    @id @default(autoincrement())
  order   Orders @relation(fields: [orderId], references: [id])
  orderId Int
  message String
}

enum ORDER_STATES {
  ACTIVE
  PREPARING
  FINISHED
  DELIVERING
  DELIVERED
  CANCELED
}

enum DELIVERY_METHODS {
  UPON_DELIVERY
  HOME_DELIVERY
}
